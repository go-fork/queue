// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	queue "go.fork.vn/queue"
	mock "github.com/stretchr/testify/mock"

	scheduler "go.fork.vn/scheduler"
)

// MockServer is an autogenerated mock type for the Server type
type MockServer struct {
	mock.Mock
}

type MockServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServer) EXPECT() *MockServer_Expecter {
	return &MockServer_Expecter{mock: &_m.Mock}
}

// GetScheduler provides a mock function with no fields
func (_m *MockServer) GetScheduler() scheduler.Manager {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetScheduler")
	}

	var r0 scheduler.Manager
	if rf, ok := ret.Get(0).(func() scheduler.Manager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(scheduler.Manager)
		}
	}

	return r0
}

// MockServer_GetScheduler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScheduler'
type MockServer_GetScheduler_Call struct {
	*mock.Call
}

// GetScheduler is a helper method to define mock.On call
func (_e *MockServer_Expecter) GetScheduler() *MockServer_GetScheduler_Call {
	return &MockServer_GetScheduler_Call{Call: _e.mock.On("GetScheduler")}
}

func (_c *MockServer_GetScheduler_Call) Run(run func()) *MockServer_GetScheduler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServer_GetScheduler_Call) Return(_a0 scheduler.Manager) *MockServer_GetScheduler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServer_GetScheduler_Call) RunAndReturn(run func() scheduler.Manager) *MockServer_GetScheduler_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterHandler provides a mock function with given fields: taskName, handler
func (_m *MockServer) RegisterHandler(taskName string, handler queue.HandlerFunc) {
	_m.Called(taskName, handler)
}

// MockServer_RegisterHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterHandler'
type MockServer_RegisterHandler_Call struct {
	*mock.Call
}

// RegisterHandler is a helper method to define mock.On call
//   - taskName string
//   - handler queue.HandlerFunc
func (_e *MockServer_Expecter) RegisterHandler(taskName interface{}, handler interface{}) *MockServer_RegisterHandler_Call {
	return &MockServer_RegisterHandler_Call{Call: _e.mock.On("RegisterHandler", taskName, handler)}
}

func (_c *MockServer_RegisterHandler_Call) Run(run func(taskName string, handler queue.HandlerFunc)) *MockServer_RegisterHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(queue.HandlerFunc))
	})
	return _c
}

func (_c *MockServer_RegisterHandler_Call) Return() *MockServer_RegisterHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServer_RegisterHandler_Call) RunAndReturn(run func(string, queue.HandlerFunc)) *MockServer_RegisterHandler_Call {
	_c.Run(run)
	return _c
}

// RegisterHandlers provides a mock function with given fields: handlers
func (_m *MockServer) RegisterHandlers(handlers map[string]queue.HandlerFunc) {
	_m.Called(handlers)
}

// MockServer_RegisterHandlers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterHandlers'
type MockServer_RegisterHandlers_Call struct {
	*mock.Call
}

// RegisterHandlers is a helper method to define mock.On call
//   - handlers map[string]queue.HandlerFunc
func (_e *MockServer_Expecter) RegisterHandlers(handlers interface{}) *MockServer_RegisterHandlers_Call {
	return &MockServer_RegisterHandlers_Call{Call: _e.mock.On("RegisterHandlers", handlers)}
}

func (_c *MockServer_RegisterHandlers_Call) Run(run func(handlers map[string]queue.HandlerFunc)) *MockServer_RegisterHandlers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]queue.HandlerFunc))
	})
	return _c
}

func (_c *MockServer_RegisterHandlers_Call) Return() *MockServer_RegisterHandlers_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServer_RegisterHandlers_Call) RunAndReturn(run func(map[string]queue.HandlerFunc)) *MockServer_RegisterHandlers_Call {
	_c.Run(run)
	return _c
}

// SetScheduler provides a mock function with given fields: _a0
func (_m *MockServer) SetScheduler(_a0 scheduler.Manager) {
	_m.Called(_a0)
}

// MockServer_SetScheduler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetScheduler'
type MockServer_SetScheduler_Call struct {
	*mock.Call
}

// SetScheduler is a helper method to define mock.On call
//   - _a0 scheduler.Manager
func (_e *MockServer_Expecter) SetScheduler(_a0 interface{}) *MockServer_SetScheduler_Call {
	return &MockServer_SetScheduler_Call{Call: _e.mock.On("SetScheduler", _a0)}
}

func (_c *MockServer_SetScheduler_Call) Run(run func(_a0 scheduler.Manager)) *MockServer_SetScheduler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(scheduler.Manager))
	})
	return _c
}

func (_c *MockServer_SetScheduler_Call) Return() *MockServer_SetScheduler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServer_SetScheduler_Call) RunAndReturn(run func(scheduler.Manager)) *MockServer_SetScheduler_Call {
	_c.Run(run)
	return _c
}

// Start provides a mock function with no fields
func (_m *MockServer) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServer_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockServer_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockServer_Expecter) Start() *MockServer_Start_Call {
	return &MockServer_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockServer_Start_Call) Run(run func()) *MockServer_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServer_Start_Call) Return(_a0 error) *MockServer_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServer_Start_Call) RunAndReturn(run func() error) *MockServer_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *MockServer) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServer_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockServer_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockServer_Expecter) Stop() *MockServer_Stop_Call {
	return &MockServer_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockServer_Stop_Call) Run(run func()) *MockServer_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServer_Stop_Call) Return(_a0 error) *MockServer_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServer_Stop_Call) RunAndReturn(run func() error) *MockServer_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockServer creates a new instance of MockServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServer {
	mock := &MockServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
