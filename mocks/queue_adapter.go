// Code generated by mockery. DO NOT EDIT.

package queue_mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockQueueAdapter is an autogenerated mock type for the QueueAdapter type
type MockQueueAdapter struct {
	mock.Mock
}

type MockQueueAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQueueAdapter) EXPECT() *MockQueueAdapter_Expecter {
	return &MockQueueAdapter_Expecter{mock: &_m.Mock}
}

// Clear provides a mock function with given fields: ctx, queueName
func (_m *MockQueueAdapter) Clear(ctx context.Context, queueName string) error {
	ret := _m.Called(ctx, queueName)

	if len(ret) == 0 {
		panic("no return value specified for Clear")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, queueName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueueAdapter_Clear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clear'
type MockQueueAdapter_Clear_Call struct {
	*mock.Call
}

// Clear is a helper method to define mock.On call
//   - ctx context.Context
//   - queueName string
func (_e *MockQueueAdapter_Expecter) Clear(ctx interface{}, queueName interface{}) *MockQueueAdapter_Clear_Call {
	return &MockQueueAdapter_Clear_Call{Call: _e.mock.On("Clear", ctx, queueName)}
}

func (_c *MockQueueAdapter_Clear_Call) Run(run func(ctx context.Context, queueName string)) *MockQueueAdapter_Clear_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQueueAdapter_Clear_Call) Return(_a0 error) *MockQueueAdapter_Clear_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueueAdapter_Clear_Call) RunAndReturn(run func(context.Context, string) error) *MockQueueAdapter_Clear_Call {
	_c.Call.Return(run)
	return _c
}

// Dequeue provides a mock function with given fields: ctx, queueName, dest
func (_m *MockQueueAdapter) Dequeue(ctx context.Context, queueName string, dest interface{}) error {
	ret := _m.Called(ctx, queueName, dest)

	if len(ret) == 0 {
		panic("no return value specified for Dequeue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, queueName, dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueueAdapter_Dequeue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dequeue'
type MockQueueAdapter_Dequeue_Call struct {
	*mock.Call
}

// Dequeue is a helper method to define mock.On call
//   - ctx context.Context
//   - queueName string
//   - dest interface{}
func (_e *MockQueueAdapter_Expecter) Dequeue(ctx interface{}, queueName interface{}, dest interface{}) *MockQueueAdapter_Dequeue_Call {
	return &MockQueueAdapter_Dequeue_Call{Call: _e.mock.On("Dequeue", ctx, queueName, dest)}
}

func (_c *MockQueueAdapter_Dequeue_Call) Run(run func(ctx context.Context, queueName string, dest interface{})) *MockQueueAdapter_Dequeue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockQueueAdapter_Dequeue_Call) Return(_a0 error) *MockQueueAdapter_Dequeue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueueAdapter_Dequeue_Call) RunAndReturn(run func(context.Context, string, interface{}) error) *MockQueueAdapter_Dequeue_Call {
	_c.Call.Return(run)
	return _c
}

// Enqueue provides a mock function with given fields: ctx, queueName, item
func (_m *MockQueueAdapter) Enqueue(ctx context.Context, queueName string, item interface{}) error {
	ret := _m.Called(ctx, queueName, item)

	if len(ret) == 0 {
		panic("no return value specified for Enqueue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, queueName, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueueAdapter_Enqueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enqueue'
type MockQueueAdapter_Enqueue_Call struct {
	*mock.Call
}

// Enqueue is a helper method to define mock.On call
//   - ctx context.Context
//   - queueName string
//   - item interface{}
func (_e *MockQueueAdapter_Expecter) Enqueue(ctx interface{}, queueName interface{}, item interface{}) *MockQueueAdapter_Enqueue_Call {
	return &MockQueueAdapter_Enqueue_Call{Call: _e.mock.On("Enqueue", ctx, queueName, item)}
}

func (_c *MockQueueAdapter_Enqueue_Call) Run(run func(ctx context.Context, queueName string, item interface{})) *MockQueueAdapter_Enqueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockQueueAdapter_Enqueue_Call) Return(_a0 error) *MockQueueAdapter_Enqueue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueueAdapter_Enqueue_Call) RunAndReturn(run func(context.Context, string, interface{}) error) *MockQueueAdapter_Enqueue_Call {
	_c.Call.Return(run)
	return _c
}

// EnqueueBatch provides a mock function with given fields: ctx, queueName, items
func (_m *MockQueueAdapter) EnqueueBatch(ctx context.Context, queueName string, items []interface{}) error {
	ret := _m.Called(ctx, queueName, items)

	if len(ret) == 0 {
		panic("no return value specified for EnqueueBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []interface{}) error); ok {
		r0 = rf(ctx, queueName, items)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueueAdapter_EnqueueBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnqueueBatch'
type MockQueueAdapter_EnqueueBatch_Call struct {
	*mock.Call
}

// EnqueueBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - queueName string
//   - items []interface{}
func (_e *MockQueueAdapter_Expecter) EnqueueBatch(ctx interface{}, queueName interface{}, items interface{}) *MockQueueAdapter_EnqueueBatch_Call {
	return &MockQueueAdapter_EnqueueBatch_Call{Call: _e.mock.On("EnqueueBatch", ctx, queueName, items)}
}

func (_c *MockQueueAdapter_EnqueueBatch_Call) Run(run func(ctx context.Context, queueName string, items []interface{})) *MockQueueAdapter_EnqueueBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]interface{}))
	})
	return _c
}

func (_c *MockQueueAdapter_EnqueueBatch_Call) Return(_a0 error) *MockQueueAdapter_EnqueueBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueueAdapter_EnqueueBatch_Call) RunAndReturn(run func(context.Context, string, []interface{}) error) *MockQueueAdapter_EnqueueBatch_Call {
	_c.Call.Return(run)
	return _c
}

// IsEmpty provides a mock function with given fields: ctx, queueName
func (_m *MockQueueAdapter) IsEmpty(ctx context.Context, queueName string) (bool, error) {
	ret := _m.Called(ctx, queueName)

	if len(ret) == 0 {
		panic("no return value specified for IsEmpty")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, queueName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, queueName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, queueName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueueAdapter_IsEmpty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEmpty'
type MockQueueAdapter_IsEmpty_Call struct {
	*mock.Call
}

// IsEmpty is a helper method to define mock.On call
//   - ctx context.Context
//   - queueName string
func (_e *MockQueueAdapter_Expecter) IsEmpty(ctx interface{}, queueName interface{}) *MockQueueAdapter_IsEmpty_Call {
	return &MockQueueAdapter_IsEmpty_Call{Call: _e.mock.On("IsEmpty", ctx, queueName)}
}

func (_c *MockQueueAdapter_IsEmpty_Call) Run(run func(ctx context.Context, queueName string)) *MockQueueAdapter_IsEmpty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQueueAdapter_IsEmpty_Call) Return(_a0 bool, _a1 error) *MockQueueAdapter_IsEmpty_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueueAdapter_IsEmpty_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockQueueAdapter_IsEmpty_Call {
	_c.Call.Return(run)
	return _c
}

// Size provides a mock function with given fields: ctx, queueName
func (_m *MockQueueAdapter) Size(ctx context.Context, queueName string) (int64, error) {
	ret := _m.Called(ctx, queueName)

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, queueName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, queueName)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, queueName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueueAdapter_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type MockQueueAdapter_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
//   - ctx context.Context
//   - queueName string
func (_e *MockQueueAdapter_Expecter) Size(ctx interface{}, queueName interface{}) *MockQueueAdapter_Size_Call {
	return &MockQueueAdapter_Size_Call{Call: _e.mock.On("Size", ctx, queueName)}
}

func (_c *MockQueueAdapter_Size_Call) Run(run func(ctx context.Context, queueName string)) *MockQueueAdapter_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQueueAdapter_Size_Call) Return(_a0 int64, _a1 error) *MockQueueAdapter_Size_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueueAdapter_Size_Call) RunAndReturn(run func(context.Context, string) (int64, error)) *MockQueueAdapter_Size_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQueueAdapter creates a new instance of MockQueueAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueueAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueueAdapter {
	mock := &MockQueueAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
