// Code generated by mockery. DO NOT EDIT.

package queue_mocks

import (
	context "context"

	redis "github.com/redis/go-redis/v9"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockQueueRedisAdapter is an autogenerated mock type for the QueueRedisAdapter type
type MockQueueRedisAdapter struct {
	mock.Mock
}

type MockQueueRedisAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQueueRedisAdapter) EXPECT() *MockQueueRedisAdapter_Expecter {
	return &MockQueueRedisAdapter_Expecter{mock: &_m.Mock}
}

// Clear provides a mock function with given fields: ctx, queueName
func (_m *MockQueueRedisAdapter) Clear(ctx context.Context, queueName string) error {
	ret := _m.Called(ctx, queueName)

	if len(ret) == 0 {
		panic("no return value specified for Clear")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, queueName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueueRedisAdapter_Clear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clear'
type MockQueueRedisAdapter_Clear_Call struct {
	*mock.Call
}

// Clear is a helper method to define mock.On call
//   - ctx context.Context
//   - queueName string
func (_e *MockQueueRedisAdapter_Expecter) Clear(ctx interface{}, queueName interface{}) *MockQueueRedisAdapter_Clear_Call {
	return &MockQueueRedisAdapter_Clear_Call{Call: _e.mock.On("Clear", ctx, queueName)}
}

func (_c *MockQueueRedisAdapter_Clear_Call) Run(run func(ctx context.Context, queueName string)) *MockQueueRedisAdapter_Clear_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQueueRedisAdapter_Clear_Call) Return(_a0 error) *MockQueueRedisAdapter_Clear_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueueRedisAdapter_Clear_Call) RunAndReturn(run func(context.Context, string) error) *MockQueueRedisAdapter_Clear_Call {
	_c.Call.Return(run)
	return _c
}

// Dequeue provides a mock function with given fields: ctx, queueName, dest
func (_m *MockQueueRedisAdapter) Dequeue(ctx context.Context, queueName string, dest interface{}) error {
	ret := _m.Called(ctx, queueName, dest)

	if len(ret) == 0 {
		panic("no return value specified for Dequeue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, queueName, dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueueRedisAdapter_Dequeue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dequeue'
type MockQueueRedisAdapter_Dequeue_Call struct {
	*mock.Call
}

// Dequeue is a helper method to define mock.On call
//   - ctx context.Context
//   - queueName string
//   - dest interface{}
func (_e *MockQueueRedisAdapter_Expecter) Dequeue(ctx interface{}, queueName interface{}, dest interface{}) *MockQueueRedisAdapter_Dequeue_Call {
	return &MockQueueRedisAdapter_Dequeue_Call{Call: _e.mock.On("Dequeue", ctx, queueName, dest)}
}

func (_c *MockQueueRedisAdapter_Dequeue_Call) Run(run func(ctx context.Context, queueName string, dest interface{})) *MockQueueRedisAdapter_Dequeue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockQueueRedisAdapter_Dequeue_Call) Return(_a0 error) *MockQueueRedisAdapter_Dequeue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueueRedisAdapter_Dequeue_Call) RunAndReturn(run func(context.Context, string, interface{}) error) *MockQueueRedisAdapter_Dequeue_Call {
	_c.Call.Return(run)
	return _c
}

// DequeueFromPriority provides a mock function with given fields: ctx, queueName, dest
func (_m *MockQueueRedisAdapter) DequeueFromPriority(ctx context.Context, queueName string, dest interface{}) error {
	ret := _m.Called(ctx, queueName, dest)

	if len(ret) == 0 {
		panic("no return value specified for DequeueFromPriority")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, queueName, dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueueRedisAdapter_DequeueFromPriority_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DequeueFromPriority'
type MockQueueRedisAdapter_DequeueFromPriority_Call struct {
	*mock.Call
}

// DequeueFromPriority is a helper method to define mock.On call
//   - ctx context.Context
//   - queueName string
//   - dest interface{}
func (_e *MockQueueRedisAdapter_Expecter) DequeueFromPriority(ctx interface{}, queueName interface{}, dest interface{}) *MockQueueRedisAdapter_DequeueFromPriority_Call {
	return &MockQueueRedisAdapter_DequeueFromPriority_Call{Call: _e.mock.On("DequeueFromPriority", ctx, queueName, dest)}
}

func (_c *MockQueueRedisAdapter_DequeueFromPriority_Call) Run(run func(ctx context.Context, queueName string, dest interface{})) *MockQueueRedisAdapter_DequeueFromPriority_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockQueueRedisAdapter_DequeueFromPriority_Call) Return(_a0 error) *MockQueueRedisAdapter_DequeueFromPriority_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueueRedisAdapter_DequeueFromPriority_Call) RunAndReturn(run func(context.Context, string, interface{}) error) *MockQueueRedisAdapter_DequeueFromPriority_Call {
	_c.Call.Return(run)
	return _c
}

// DequeueWithTimeout provides a mock function with given fields: ctx, queueName, timeout, dest
func (_m *MockQueueRedisAdapter) DequeueWithTimeout(ctx context.Context, queueName string, timeout time.Duration, dest interface{}) error {
	ret := _m.Called(ctx, queueName, timeout, dest)

	if len(ret) == 0 {
		panic("no return value specified for DequeueWithTimeout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, interface{}) error); ok {
		r0 = rf(ctx, queueName, timeout, dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueueRedisAdapter_DequeueWithTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DequeueWithTimeout'
type MockQueueRedisAdapter_DequeueWithTimeout_Call struct {
	*mock.Call
}

// DequeueWithTimeout is a helper method to define mock.On call
//   - ctx context.Context
//   - queueName string
//   - timeout time.Duration
//   - dest interface{}
func (_e *MockQueueRedisAdapter_Expecter) DequeueWithTimeout(ctx interface{}, queueName interface{}, timeout interface{}, dest interface{}) *MockQueueRedisAdapter_DequeueWithTimeout_Call {
	return &MockQueueRedisAdapter_DequeueWithTimeout_Call{Call: _e.mock.On("DequeueWithTimeout", ctx, queueName, timeout, dest)}
}

func (_c *MockQueueRedisAdapter_DequeueWithTimeout_Call) Run(run func(ctx context.Context, queueName string, timeout time.Duration, dest interface{})) *MockQueueRedisAdapter_DequeueWithTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration), args[3].(interface{}))
	})
	return _c
}

func (_c *MockQueueRedisAdapter_DequeueWithTimeout_Call) Return(_a0 error) *MockQueueRedisAdapter_DequeueWithTimeout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueueRedisAdapter_DequeueWithTimeout_Call) RunAndReturn(run func(context.Context, string, time.Duration, interface{}) error) *MockQueueRedisAdapter_DequeueWithTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// Enqueue provides a mock function with given fields: ctx, queueName, item
func (_m *MockQueueRedisAdapter) Enqueue(ctx context.Context, queueName string, item interface{}) error {
	ret := _m.Called(ctx, queueName, item)

	if len(ret) == 0 {
		panic("no return value specified for Enqueue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, queueName, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueueRedisAdapter_Enqueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enqueue'
type MockQueueRedisAdapter_Enqueue_Call struct {
	*mock.Call
}

// Enqueue is a helper method to define mock.On call
//   - ctx context.Context
//   - queueName string
//   - item interface{}
func (_e *MockQueueRedisAdapter_Expecter) Enqueue(ctx interface{}, queueName interface{}, item interface{}) *MockQueueRedisAdapter_Enqueue_Call {
	return &MockQueueRedisAdapter_Enqueue_Call{Call: _e.mock.On("Enqueue", ctx, queueName, item)}
}

func (_c *MockQueueRedisAdapter_Enqueue_Call) Run(run func(ctx context.Context, queueName string, item interface{})) *MockQueueRedisAdapter_Enqueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockQueueRedisAdapter_Enqueue_Call) Return(_a0 error) *MockQueueRedisAdapter_Enqueue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueueRedisAdapter_Enqueue_Call) RunAndReturn(run func(context.Context, string, interface{}) error) *MockQueueRedisAdapter_Enqueue_Call {
	_c.Call.Return(run)
	return _c
}

// EnqueueBatch provides a mock function with given fields: ctx, queueName, items
func (_m *MockQueueRedisAdapter) EnqueueBatch(ctx context.Context, queueName string, items []interface{}) error {
	ret := _m.Called(ctx, queueName, items)

	if len(ret) == 0 {
		panic("no return value specified for EnqueueBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []interface{}) error); ok {
		r0 = rf(ctx, queueName, items)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueueRedisAdapter_EnqueueBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnqueueBatch'
type MockQueueRedisAdapter_EnqueueBatch_Call struct {
	*mock.Call
}

// EnqueueBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - queueName string
//   - items []interface{}
func (_e *MockQueueRedisAdapter_Expecter) EnqueueBatch(ctx interface{}, queueName interface{}, items interface{}) *MockQueueRedisAdapter_EnqueueBatch_Call {
	return &MockQueueRedisAdapter_EnqueueBatch_Call{Call: _e.mock.On("EnqueueBatch", ctx, queueName, items)}
}

func (_c *MockQueueRedisAdapter_EnqueueBatch_Call) Run(run func(ctx context.Context, queueName string, items []interface{})) *MockQueueRedisAdapter_EnqueueBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]interface{}))
	})
	return _c
}

func (_c *MockQueueRedisAdapter_EnqueueBatch_Call) Return(_a0 error) *MockQueueRedisAdapter_EnqueueBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueueRedisAdapter_EnqueueBatch_Call) RunAndReturn(run func(context.Context, string, []interface{}) error) *MockQueueRedisAdapter_EnqueueBatch_Call {
	_c.Call.Return(run)
	return _c
}

// EnqueueWithPipeline provides a mock function with given fields: ctx, items
func (_m *MockQueueRedisAdapter) EnqueueWithPipeline(ctx context.Context, items map[string][]interface{}) error {
	ret := _m.Called(ctx, items)

	if len(ret) == 0 {
		panic("no return value specified for EnqueueWithPipeline")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string][]interface{}) error); ok {
		r0 = rf(ctx, items)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueueRedisAdapter_EnqueueWithPipeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnqueueWithPipeline'
type MockQueueRedisAdapter_EnqueueWithPipeline_Call struct {
	*mock.Call
}

// EnqueueWithPipeline is a helper method to define mock.On call
//   - ctx context.Context
//   - items map[string][]interface{}
func (_e *MockQueueRedisAdapter_Expecter) EnqueueWithPipeline(ctx interface{}, items interface{}) *MockQueueRedisAdapter_EnqueueWithPipeline_Call {
	return &MockQueueRedisAdapter_EnqueueWithPipeline_Call{Call: _e.mock.On("EnqueueWithPipeline", ctx, items)}
}

func (_c *MockQueueRedisAdapter_EnqueueWithPipeline_Call) Run(run func(ctx context.Context, items map[string][]interface{})) *MockQueueRedisAdapter_EnqueueWithPipeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[string][]interface{}))
	})
	return _c
}

func (_c *MockQueueRedisAdapter_EnqueueWithPipeline_Call) Return(_a0 error) *MockQueueRedisAdapter_EnqueueWithPipeline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueueRedisAdapter_EnqueueWithPipeline_Call) RunAndReturn(run func(context.Context, map[string][]interface{}) error) *MockQueueRedisAdapter_EnqueueWithPipeline_Call {
	_c.Call.Return(run)
	return _c
}

// EnqueueWithPriority provides a mock function with given fields: ctx, queueName, item, priority
func (_m *MockQueueRedisAdapter) EnqueueWithPriority(ctx context.Context, queueName string, item interface{}, priority float64) error {
	ret := _m.Called(ctx, queueName, item, priority)

	if len(ret) == 0 {
		panic("no return value specified for EnqueueWithPriority")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, float64) error); ok {
		r0 = rf(ctx, queueName, item, priority)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueueRedisAdapter_EnqueueWithPriority_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnqueueWithPriority'
type MockQueueRedisAdapter_EnqueueWithPriority_Call struct {
	*mock.Call
}

// EnqueueWithPriority is a helper method to define mock.On call
//   - ctx context.Context
//   - queueName string
//   - item interface{}
//   - priority float64
func (_e *MockQueueRedisAdapter_Expecter) EnqueueWithPriority(ctx interface{}, queueName interface{}, item interface{}, priority interface{}) *MockQueueRedisAdapter_EnqueueWithPriority_Call {
	return &MockQueueRedisAdapter_EnqueueWithPriority_Call{Call: _e.mock.On("EnqueueWithPriority", ctx, queueName, item, priority)}
}

func (_c *MockQueueRedisAdapter_EnqueueWithPriority_Call) Run(run func(ctx context.Context, queueName string, item interface{}, priority float64)) *MockQueueRedisAdapter_EnqueueWithPriority_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(float64))
	})
	return _c
}

func (_c *MockQueueRedisAdapter_EnqueueWithPriority_Call) Return(_a0 error) *MockQueueRedisAdapter_EnqueueWithPriority_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueueRedisAdapter_EnqueueWithPriority_Call) RunAndReturn(run func(context.Context, string, interface{}, float64) error) *MockQueueRedisAdapter_EnqueueWithPriority_Call {
	_c.Call.Return(run)
	return _c
}

// EnqueueWithTTL provides a mock function with given fields: ctx, queueName, item, ttl
func (_m *MockQueueRedisAdapter) EnqueueWithTTL(ctx context.Context, queueName string, item interface{}, ttl time.Duration) error {
	ret := _m.Called(ctx, queueName, item, ttl)

	if len(ret) == 0 {
		panic("no return value specified for EnqueueWithTTL")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, time.Duration) error); ok {
		r0 = rf(ctx, queueName, item, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueueRedisAdapter_EnqueueWithTTL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnqueueWithTTL'
type MockQueueRedisAdapter_EnqueueWithTTL_Call struct {
	*mock.Call
}

// EnqueueWithTTL is a helper method to define mock.On call
//   - ctx context.Context
//   - queueName string
//   - item interface{}
//   - ttl time.Duration
func (_e *MockQueueRedisAdapter_Expecter) EnqueueWithTTL(ctx interface{}, queueName interface{}, item interface{}, ttl interface{}) *MockQueueRedisAdapter_EnqueueWithTTL_Call {
	return &MockQueueRedisAdapter_EnqueueWithTTL_Call{Call: _e.mock.On("EnqueueWithTTL", ctx, queueName, item, ttl)}
}

func (_c *MockQueueRedisAdapter_EnqueueWithTTL_Call) Run(run func(ctx context.Context, queueName string, item interface{}, ttl time.Duration)) *MockQueueRedisAdapter_EnqueueWithTTL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockQueueRedisAdapter_EnqueueWithTTL_Call) Return(_a0 error) *MockQueueRedisAdapter_EnqueueWithTTL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueueRedisAdapter_EnqueueWithTTL_Call) RunAndReturn(run func(context.Context, string, interface{}, time.Duration) error) *MockQueueRedisAdapter_EnqueueWithTTL_Call {
	_c.Call.Return(run)
	return _c
}

// FlushQueues provides a mock function with given fields: ctx
func (_m *MockQueueRedisAdapter) FlushQueues(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FlushQueues")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueueRedisAdapter_FlushQueues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FlushQueues'
type MockQueueRedisAdapter_FlushQueues_Call struct {
	*mock.Call
}

// FlushQueues is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQueueRedisAdapter_Expecter) FlushQueues(ctx interface{}) *MockQueueRedisAdapter_FlushQueues_Call {
	return &MockQueueRedisAdapter_FlushQueues_Call{Call: _e.mock.On("FlushQueues", ctx)}
}

func (_c *MockQueueRedisAdapter_FlushQueues_Call) Run(run func(ctx context.Context)) *MockQueueRedisAdapter_FlushQueues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQueueRedisAdapter_FlushQueues_Call) Return(_a0 int64, _a1 error) *MockQueueRedisAdapter_FlushQueues_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueueRedisAdapter_FlushQueues_Call) RunAndReturn(run func(context.Context) (int64, error)) *MockQueueRedisAdapter_FlushQueues_Call {
	_c.Call.Return(run)
	return _c
}

// GetQueueInfo provides a mock function with given fields: ctx, queueName
func (_m *MockQueueRedisAdapter) GetQueueInfo(ctx context.Context, queueName string) (map[string]interface{}, error) {
	ret := _m.Called(ctx, queueName)

	if len(ret) == 0 {
		panic("no return value specified for GetQueueInfo")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (map[string]interface{}, error)); ok {
		return rf(ctx, queueName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) map[string]interface{}); ok {
		r0 = rf(ctx, queueName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, queueName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueueRedisAdapter_GetQueueInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQueueInfo'
type MockQueueRedisAdapter_GetQueueInfo_Call struct {
	*mock.Call
}

// GetQueueInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - queueName string
func (_e *MockQueueRedisAdapter_Expecter) GetQueueInfo(ctx interface{}, queueName interface{}) *MockQueueRedisAdapter_GetQueueInfo_Call {
	return &MockQueueRedisAdapter_GetQueueInfo_Call{Call: _e.mock.On("GetQueueInfo", ctx, queueName)}
}

func (_c *MockQueueRedisAdapter_GetQueueInfo_Call) Run(run func(ctx context.Context, queueName string)) *MockQueueRedisAdapter_GetQueueInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQueueRedisAdapter_GetQueueInfo_Call) Return(_a0 map[string]interface{}, _a1 error) *MockQueueRedisAdapter_GetQueueInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueueRedisAdapter_GetQueueInfo_Call) RunAndReturn(run func(context.Context, string) (map[string]interface{}, error)) *MockQueueRedisAdapter_GetQueueInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetRedisClient provides a mock function with no fields
func (_m *MockQueueRedisAdapter) GetRedisClient() *redis.Client {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRedisClient")
	}

	var r0 *redis.Client
	if rf, ok := ret.Get(0).(func() *redis.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.Client)
		}
	}

	return r0
}

// MockQueueRedisAdapter_GetRedisClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRedisClient'
type MockQueueRedisAdapter_GetRedisClient_Call struct {
	*mock.Call
}

// GetRedisClient is a helper method to define mock.On call
func (_e *MockQueueRedisAdapter_Expecter) GetRedisClient() *MockQueueRedisAdapter_GetRedisClient_Call {
	return &MockQueueRedisAdapter_GetRedisClient_Call{Call: _e.mock.On("GetRedisClient")}
}

func (_c *MockQueueRedisAdapter_GetRedisClient_Call) Run(run func()) *MockQueueRedisAdapter_GetRedisClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockQueueRedisAdapter_GetRedisClient_Call) Return(_a0 *redis.Client) *MockQueueRedisAdapter_GetRedisClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueueRedisAdapter_GetRedisClient_Call) RunAndReturn(run func() *redis.Client) *MockQueueRedisAdapter_GetRedisClient_Call {
	_c.Call.Return(run)
	return _c
}

// IsEmpty provides a mock function with given fields: ctx, queueName
func (_m *MockQueueRedisAdapter) IsEmpty(ctx context.Context, queueName string) (bool, error) {
	ret := _m.Called(ctx, queueName)

	if len(ret) == 0 {
		panic("no return value specified for IsEmpty")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, queueName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, queueName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, queueName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueueRedisAdapter_IsEmpty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEmpty'
type MockQueueRedisAdapter_IsEmpty_Call struct {
	*mock.Call
}

// IsEmpty is a helper method to define mock.On call
//   - ctx context.Context
//   - queueName string
func (_e *MockQueueRedisAdapter_Expecter) IsEmpty(ctx interface{}, queueName interface{}) *MockQueueRedisAdapter_IsEmpty_Call {
	return &MockQueueRedisAdapter_IsEmpty_Call{Call: _e.mock.On("IsEmpty", ctx, queueName)}
}

func (_c *MockQueueRedisAdapter_IsEmpty_Call) Run(run func(ctx context.Context, queueName string)) *MockQueueRedisAdapter_IsEmpty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQueueRedisAdapter_IsEmpty_Call) Return(_a0 bool, _a1 error) *MockQueueRedisAdapter_IsEmpty_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueueRedisAdapter_IsEmpty_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockQueueRedisAdapter_IsEmpty_Call {
	_c.Call.Return(run)
	return _c
}

// MultiDequeue provides a mock function with given fields: ctx, queueName, count, destSlice
func (_m *MockQueueRedisAdapter) MultiDequeue(ctx context.Context, queueName string, count int, destSlice interface{}) (int, error) {
	ret := _m.Called(ctx, queueName, count, destSlice)

	if len(ret) == 0 {
		panic("no return value specified for MultiDequeue")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, interface{}) (int, error)); ok {
		return rf(ctx, queueName, count, destSlice)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, interface{}) int); ok {
		r0 = rf(ctx, queueName, count, destSlice)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, interface{}) error); ok {
		r1 = rf(ctx, queueName, count, destSlice)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueueRedisAdapter_MultiDequeue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MultiDequeue'
type MockQueueRedisAdapter_MultiDequeue_Call struct {
	*mock.Call
}

// MultiDequeue is a helper method to define mock.On call
//   - ctx context.Context
//   - queueName string
//   - count int
//   - destSlice interface{}
func (_e *MockQueueRedisAdapter_Expecter) MultiDequeue(ctx interface{}, queueName interface{}, count interface{}, destSlice interface{}) *MockQueueRedisAdapter_MultiDequeue_Call {
	return &MockQueueRedisAdapter_MultiDequeue_Call{Call: _e.mock.On("MultiDequeue", ctx, queueName, count, destSlice)}
}

func (_c *MockQueueRedisAdapter_MultiDequeue_Call) Run(run func(ctx context.Context, queueName string, count int, destSlice interface{})) *MockQueueRedisAdapter_MultiDequeue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(interface{}))
	})
	return _c
}

func (_c *MockQueueRedisAdapter_MultiDequeue_Call) Return(_a0 int, _a1 error) *MockQueueRedisAdapter_MultiDequeue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueueRedisAdapter_MultiDequeue_Call) RunAndReturn(run func(context.Context, string, int, interface{}) (int, error)) *MockQueueRedisAdapter_MultiDequeue_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with given fields: ctx
func (_m *MockQueueRedisAdapter) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueueRedisAdapter_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockQueueRedisAdapter_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQueueRedisAdapter_Expecter) Ping(ctx interface{}) *MockQueueRedisAdapter_Ping_Call {
	return &MockQueueRedisAdapter_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *MockQueueRedisAdapter_Ping_Call) Run(run func(ctx context.Context)) *MockQueueRedisAdapter_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQueueRedisAdapter_Ping_Call) Return(_a0 error) *MockQueueRedisAdapter_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueueRedisAdapter_Ping_Call) RunAndReturn(run func(context.Context) error) *MockQueueRedisAdapter_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// Size provides a mock function with given fields: ctx, queueName
func (_m *MockQueueRedisAdapter) Size(ctx context.Context, queueName string) (int64, error) {
	ret := _m.Called(ctx, queueName)

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, queueName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, queueName)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, queueName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueueRedisAdapter_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type MockQueueRedisAdapter_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
//   - ctx context.Context
//   - queueName string
func (_e *MockQueueRedisAdapter_Expecter) Size(ctx interface{}, queueName interface{}) *MockQueueRedisAdapter_Size_Call {
	return &MockQueueRedisAdapter_Size_Call{Call: _e.mock.On("Size", ctx, queueName)}
}

func (_c *MockQueueRedisAdapter_Size_Call) Run(run func(ctx context.Context, queueName string)) *MockQueueRedisAdapter_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQueueRedisAdapter_Size_Call) Return(_a0 int64, _a1 error) *MockQueueRedisAdapter_Size_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueueRedisAdapter_Size_Call) RunAndReturn(run func(context.Context, string) (int64, error)) *MockQueueRedisAdapter_Size_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQueueRedisAdapter creates a new instance of MockQueueRedisAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueueRedisAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueueRedisAdapter {
	mock := &MockQueueRedisAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
