// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	queue "go.fork.vn/queue"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockClient) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockClient_Expecter) Close() *MockClient_Close_Call {
	return &MockClient_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockClient_Close_Call) Run(run func()) *MockClient_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_Close_Call) Return(_a0 error) *MockClient_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Close_Call) RunAndReturn(run func() error) *MockClient_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Enqueue provides a mock function with given fields: taskName, payload, opts
func (_m *MockClient) Enqueue(taskName string, payload interface{}, opts ...queue.Option) (*queue.TaskInfo, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, taskName, payload)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Enqueue")
	}

	var r0 *queue.TaskInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, interface{}, ...queue.Option) (*queue.TaskInfo, error)); ok {
		return rf(taskName, payload, opts...)
	}
	if rf, ok := ret.Get(0).(func(string, interface{}, ...queue.Option) *queue.TaskInfo); ok {
		r0 = rf(taskName, payload, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*queue.TaskInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, interface{}, ...queue.Option) error); ok {
		r1 = rf(taskName, payload, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_Enqueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enqueue'
type MockClient_Enqueue_Call struct {
	*mock.Call
}

// Enqueue is a helper method to define mock.On call
//   - taskName string
//   - payload interface{}
//   - opts ...queue.Option
func (_e *MockClient_Expecter) Enqueue(taskName interface{}, payload interface{}, opts ...interface{}) *MockClient_Enqueue_Call {
	return &MockClient_Enqueue_Call{Call: _e.mock.On("Enqueue",
		append([]interface{}{taskName, payload}, opts...)...)}
}

func (_c *MockClient_Enqueue_Call) Run(run func(taskName string, payload interface{}, opts ...queue.Option)) *MockClient_Enqueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]queue.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(queue.Option)
			}
		}
		run(args[0].(string), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_Enqueue_Call) Return(_a0 *queue.TaskInfo, _a1 error) *MockClient_Enqueue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_Enqueue_Call) RunAndReturn(run func(string, interface{}, ...queue.Option) (*queue.TaskInfo, error)) *MockClient_Enqueue_Call {
	_c.Call.Return(run)
	return _c
}

// EnqueueAt provides a mock function with given fields: taskName, processAt, payload, opts
func (_m *MockClient) EnqueueAt(taskName string, processAt time.Time, payload interface{}, opts ...queue.Option) (*queue.TaskInfo, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, taskName, processAt, payload)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnqueueAt")
	}

	var r0 *queue.TaskInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, time.Time, interface{}, ...queue.Option) (*queue.TaskInfo, error)); ok {
		return rf(taskName, processAt, payload, opts...)
	}
	if rf, ok := ret.Get(0).(func(string, time.Time, interface{}, ...queue.Option) *queue.TaskInfo); ok {
		r0 = rf(taskName, processAt, payload, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*queue.TaskInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, time.Time, interface{}, ...queue.Option) error); ok {
		r1 = rf(taskName, processAt, payload, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_EnqueueAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnqueueAt'
type MockClient_EnqueueAt_Call struct {
	*mock.Call
}

// EnqueueAt is a helper method to define mock.On call
//   - taskName string
//   - processAt time.Time
//   - payload interface{}
//   - opts ...queue.Option
func (_e *MockClient_Expecter) EnqueueAt(taskName interface{}, processAt interface{}, payload interface{}, opts ...interface{}) *MockClient_EnqueueAt_Call {
	return &MockClient_EnqueueAt_Call{Call: _e.mock.On("EnqueueAt",
		append([]interface{}{taskName, processAt, payload}, opts...)...)}
}

func (_c *MockClient_EnqueueAt_Call) Run(run func(taskName string, processAt time.Time, payload interface{}, opts ...queue.Option)) *MockClient_EnqueueAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]queue.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(queue.Option)
			}
		}
		run(args[0].(string), args[1].(time.Time), args[2].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_EnqueueAt_Call) Return(_a0 *queue.TaskInfo, _a1 error) *MockClient_EnqueueAt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_EnqueueAt_Call) RunAndReturn(run func(string, time.Time, interface{}, ...queue.Option) (*queue.TaskInfo, error)) *MockClient_EnqueueAt_Call {
	_c.Call.Return(run)
	return _c
}

// EnqueueContext provides a mock function with given fields: ctx, taskName, payload, opts
func (_m *MockClient) EnqueueContext(ctx context.Context, taskName string, payload interface{}, opts ...queue.Option) (*queue.TaskInfo, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, taskName, payload)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnqueueContext")
	}

	var r0 *queue.TaskInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, ...queue.Option) (*queue.TaskInfo, error)); ok {
		return rf(ctx, taskName, payload, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, ...queue.Option) *queue.TaskInfo); ok {
		r0 = rf(ctx, taskName, payload, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*queue.TaskInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}, ...queue.Option) error); ok {
		r1 = rf(ctx, taskName, payload, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_EnqueueContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnqueueContext'
type MockClient_EnqueueContext_Call struct {
	*mock.Call
}

// EnqueueContext is a helper method to define mock.On call
//   - ctx context.Context
//   - taskName string
//   - payload interface{}
//   - opts ...queue.Option
func (_e *MockClient_Expecter) EnqueueContext(ctx interface{}, taskName interface{}, payload interface{}, opts ...interface{}) *MockClient_EnqueueContext_Call {
	return &MockClient_EnqueueContext_Call{Call: _e.mock.On("EnqueueContext",
		append([]interface{}{ctx, taskName, payload}, opts...)...)}
}

func (_c *MockClient_EnqueueContext_Call) Run(run func(ctx context.Context, taskName string, payload interface{}, opts ...queue.Option)) *MockClient_EnqueueContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]queue.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(queue.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_EnqueueContext_Call) Return(_a0 *queue.TaskInfo, _a1 error) *MockClient_EnqueueContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_EnqueueContext_Call) RunAndReturn(run func(context.Context, string, interface{}, ...queue.Option) (*queue.TaskInfo, error)) *MockClient_EnqueueContext_Call {
	_c.Call.Return(run)
	return _c
}

// EnqueueIn provides a mock function with given fields: taskName, delay, payload, opts
func (_m *MockClient) EnqueueIn(taskName string, delay time.Duration, payload interface{}, opts ...queue.Option) (*queue.TaskInfo, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, taskName, delay, payload)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnqueueIn")
	}

	var r0 *queue.TaskInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, time.Duration, interface{}, ...queue.Option) (*queue.TaskInfo, error)); ok {
		return rf(taskName, delay, payload, opts...)
	}
	if rf, ok := ret.Get(0).(func(string, time.Duration, interface{}, ...queue.Option) *queue.TaskInfo); ok {
		r0 = rf(taskName, delay, payload, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*queue.TaskInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, time.Duration, interface{}, ...queue.Option) error); ok {
		r1 = rf(taskName, delay, payload, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_EnqueueIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnqueueIn'
type MockClient_EnqueueIn_Call struct {
	*mock.Call
}

// EnqueueIn is a helper method to define mock.On call
//   - taskName string
//   - delay time.Duration
//   - payload interface{}
//   - opts ...queue.Option
func (_e *MockClient_Expecter) EnqueueIn(taskName interface{}, delay interface{}, payload interface{}, opts ...interface{}) *MockClient_EnqueueIn_Call {
	return &MockClient_EnqueueIn_Call{Call: _e.mock.On("EnqueueIn",
		append([]interface{}{taskName, delay, payload}, opts...)...)}
}

func (_c *MockClient_EnqueueIn_Call) Run(run func(taskName string, delay time.Duration, payload interface{}, opts ...queue.Option)) *MockClient_EnqueueIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]queue.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(queue.Option)
			}
		}
		run(args[0].(string), args[1].(time.Duration), args[2].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_EnqueueIn_Call) Return(_a0 *queue.TaskInfo, _a1 error) *MockClient_EnqueueIn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_EnqueueIn_Call) RunAndReturn(run func(string, time.Duration, interface{}, ...queue.Option) (*queue.TaskInfo, error)) *MockClient_EnqueueIn_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
